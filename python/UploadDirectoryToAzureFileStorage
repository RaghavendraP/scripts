#!/usr/bin/python
#sudo pip install "azure==2.0.0rc5"

import sys
import time
import requests
import os.path

HAS_ARM = False

try:
    from azure.mgmt.resource.resources.models import ResourceGroup, DeploymentProperties, DeploymentMode
    from azure.mgmt.resource.resources import ResourceManagementClient
    from azure.common.credentials import ServicePrincipalCredentials, UserPassCredentials
    from azure.mgmt.storage import StorageManagementClient
    from azure.storage.file import FileService, ContentSettings
		from azure.mgmt.storage.models import (
        StorageAccountCreateParameters,
        StorageAccountUpdateParameters,
        Sku,
        SkuName,
        Kind
    )
    HAS_ARM = True
except ImportError:
    pass

def splitall(path):
    allparts = []
    while 1:
        parts = os.path.split(path)
        if parts[0] == path:  # sentinel for absolute paths
            allparts.insert(0, parts[0])
            break
        elif parts[1] == path: # sentinel for relative paths
            allparts.insert(0, parts[1])
            break
        else:
            path = parts[0]
            allparts.insert(0, parts[1])
    return allparts

subscription_id= ""
client_id= ""
secret= ""
tenant= ""
creds = ServicePrincipalCredentials(client_id=client_id, secret=secret,tenant=tenant)
resource_client = ResourceManagementClient(credentials=creds, subscription_id=subscription_id)
storage_client = StorageManagementClient(credentials=creds, subscription_id=subscription_id)

resource_group_name=""
storage_account_name=""
stg_act_exists = 'False'
file_share=''

resource_group = resource_client.resource_groups.get(resource_group_name)
for item in storage_client.storage_accounts.list_by_resource_group(resource_group_name):
    if(item.name == storage_account_name):
        stg_act_exists = 'True'
        break

if (stg_act_exists == 'False'):
    storage_client.storage_accounts.create(resource_group_name,storage_account_name,StorageAccountCreateParameters(
        sku=Sku(SkuName.standard_lrs),
        kind=Kind.storage,
        location=resource_group.location
        ))    

storage_keys = storage_client.storage_accounts.list_keys(resource_group_name,storage_account_name)
storage_keys = {v.key_name: v.value for v in storage_keys.keys}
file_service = FileService(account_name=storage_account_name,account_key=storage_keys['key2'])

main_dir = 'v1' #Give the directory name relative to current directory
directory_set=set("")
for root, directories, filenames in os.walk(main_dir):
    for directory in directories:
        tmp=''
        for folder in splitall(os.path.join(root, directory)):
            tmp = os.path.join(tmp,folder)
            directory_set.add(tmp)

for directory in sorted(directory_set):
    file_service.create_directory(file_share,directory)

for root, directories, filenames in os.walk(main_dir):
    for filename in filenames:
        file_service.create_file_from_path(share_name=file_share,directory_name=root,file_name=filename,local_file_path=os.path.join(root,filename),validate_content=True)

